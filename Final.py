# -*- coding: utf-8 -*-
"""Proyecto Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UOXqekrVST2X7u9Fiq6dOyKAy2f-C9WY
"""

import pandas as pd    #pandas
import numpy as np    #numpy
import matplotlib.pyplot as plt #Para graficar
import pylab as py
import statsmodels.api as sm
import openpyxl
import seaborn as sns #HEat map

from sklearn.preprocessing import LabelEncoder  #Para codificar variables
from sklearn import preprocessing 
#from seaborn import load_dataset
from scipy import stats #Graficos de puntos quartiles
from statsmodels.graphics.gofplots import qqplot


url="https://drive.google.com/uc?export=download&id=11abhHw5XzpY38KBFgsMK-xZAxlPYevwR" #leer de internet
df_Data = pd.read_csv(url, encoding='latin-1',sep=';',header=None,
names=["Fecha", "apellidos","nombres","asignatura","primer corte","peso","estatura","edad","fecha de nacimiento","lugar recidencia","cohabitantes",
       "Horas de Actividad fisica","Horas de Sueño","Horas de esparcimiento"]);
df_X=df_Data.drop([0],axis=0)        #Eliminar columna

dictionary = {'é':'e', 'í':'i', 'á':'a', 'ó':'o', 'ú':'u', 'Á':'A', 'É':'E', 'Í':'I', 'Ó':'O', 'Ú':'U', '˜':'0', 
              '€':'0', 'ð':'0', '':'o', '':'a', '':'0', 'Ð':'D', '¤':'0'} #To repleace all special characters
df_X.replace(dictionary, regex=True, inplace=True)

df_Data=df_X

#Analisis por columnas
print('--------------------------------------------------------------------------')
k=df_Data['Fecha']
print('Fecha')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['apellidos']
print('apellidos')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['nombres']
print('nombres')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['asignatura']
print('asignatura')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['primer corte']
print('primer corte')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['peso']
print('peso')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['estatura']
print('estatura')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['edad']
print('edad')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['fecha de nacimiento']
print('fecha de nacimiento')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['lugar recidencia']
print('lugar recidencia')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['cohabitantes']
print('cohabitantes')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de Actividad fisica']
print('Horas de Actividad fisica')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de Sueño']
print('Horas de Sueño')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de esparcimiento']
print('Horas de esparcimiento')
Moda = k.mode()
print('Moda: ',Moda)
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')

#Limpieza de datos
print('--------------------------------------------------------------------------')
print('Fecha')#Variable cuantitativa
for index in df_Data.index:
    N=df_Data.loc[index,'Fecha']
    U=N.split()
    df_Data.loc[index,'Fecha'] = U[0]

k=df_Data['Fecha']
D = k.unique().tolist()
print('Valores unicos: ',D) #Solo se deja la fecha
print('--------------------------------------------------------------------------')
print('apellidos')#Variable cualitativa
k=df_Data['apellidos']
D = k.unique().tolist()
print('Valores unicos: ',D)#No es necesario el proceso de limpieza
print('--------------------------------------------------------------------------')
print('nombres')#Variable cualitativa
D = k.unique().tolist()
print('Valores unicos: ',D)#No es necesario el proceso de limpieza
print('--------------------------------------------------------------------------')
print('asignatura')#Variable cualitativa
#Despues de multiples verificaciones se realizo la limpieza de datos
dictt={
'Algoritmos y programacion ':'Algoritmos y programacion',
'Algoritmos y programacion.':'Algoritmos y programacion',
 'Algoritmos y programaciaon':'Algoritmos y programacion',
 'algoritmos y programaciaon':'Algoritmos y programacion',
 'Algoritmos y Programaciaon':'Algoritmos y programacion',
 'algoritmos y programacion':'Algoritmos y programacion',
 'Algoritmos y programaciaon ':'Algoritmos y programacion',
 'Algoritmos y Programacion':'Algoritmos y programacion',
 'Bases de Datos II ':'Bases de Datos II',
 'Bases de datos ll':'Bases de Datos II',
 'Bases de datos dos ':'Bases de Datos II',
 'Bases de datos 2':'Bases de Datos II',
 'Bases de datos II':'Bases de Datos II',
 'Bases datos 2':'Bases de Datos II',
 'Bases de datos 2 ':'Bases de Datos II',
 'Base de datos II':'Bases de Datos II',
 'Algoritmos y programaciaon I':'Algoritmos y programacion',
 'Bases de datos II-Grupo-2':'Bases de Datos II',
 'Bases 2 Grupo 2':'Bases de Datos II',
 'Bases de datos II Grupo 2':'Bases de Datos II',
 'Base de datos 2':'Bases de Datos II',
 'Bases de datos':'Bases de Datos II',
 'TGS': 'TGS',
 'Teoria general de sistemas': 'TGS',
 'Teoraia general de Sistemas': 'TGS',
 'ninguna': 'Ninguna',
 'Ninguna': 'Ninguna',
 'Teoria General de Sistemas': 'TGS',
 'Teoraia general de sistemas': 'TGS',
 'Teoraia General de los sistemas': 'TGS',
 'Programaciaon II': 'Programacion II',
 'Programaciaon ll': 'Programacion II',
 'Programaciaon 2': 'Programacion II',
 'Programacion 2': 'Programacion II',
 'Programacion II': 'Programacion II',
 'No veo materias con Quevedo ': 'Ninguna',
 'Programaciaon 3': 'Programacion III',
 'Programaciaon 1': 'Programacion I',
 'Programaciaon I': 'Programacion I',
 'Programacion 1': 'Programacion I',
 'programacion I': 'Programacion I',
 'Programacion I': 'Programacion I',
 'Programacion 3': 'Programacion III',
 'Programaciaon III': 'Programacion III'
}

df_Data.replace(dictt, regex=True, inplace=True)

#Se procedieron a hacer multiples limpiezas de datos

dictt_1 ={'Algoritmos y programacion ':'Algoritmos y programacion', 
        'Algoritmos y programacion I':'Algoritmos y programacion',
        'Algoritmos y programacionI': 'Algoritmos y programacion',
        'Bases de Datos II-Grupo-2':'Bases de Datos II',
        'Bases de Datos II ':'Bases de Datos II',
        'Bases de Datos II Grupo 2':'Bases de Datos II',
        'Bases de Datos II-Grupo-2':'Bases de Datos II',
        'Bases de Datos IIGrupo 2':'Bases de Datos II',
        'Bases de Datos IIGrupo 2':'Bases de Datos II',
        'TeoraDa general de Sistemas':'TGS',
        'TeoraDa general de sistemas':'TGS',
        'TeoraDa General de los sistemas':'TGS'
        }
df_Data.replace(dictt_1, regex=True, inplace=True)

#Se procedieron a hacer multiples limpiezas de datos
dictt_2 ={'Algoritmos y programacionI':'Algoritmos y programacion',
          'Bases de Datos IIGrupo 2':'Bases de Datos II'
          }
df_Data.replace(dictt_1, regex=True, inplace=True)

k=df_Data['asignatura']
D = k.unique().tolist()
print('Valores unicos: ',D) #Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('primer corte')#Variable cuantitativa
df_Data['primer corte'].fillna(0 , inplace=True)#valores nulos pasan a ser zero

for index in df_Data.index:
    if df_Data.loc[index,'primer corte']=='Ninguna':
        df_Data.loc[index,'primer corte'] = '0'
    elif df_Data.loc[index,'primer corte']=='No estoy viendo materias':
        df_Data.loc[index,'primer corte'] = '0'
    elif df_Data.loc[index,'primer corte']=='4,5':
        df_Data.loc[index,'primer corte'] = '4.5'

L=df_Data['primer corte'].astype(float)#Covierte a flotante
for index in df_Data.index:
    df_Data.loc[index,'primer corte'] = L[index]

for index in df_Data.index:
    if df_Data.loc[index,'primer corte'] > 5:
        df_Data.loc[index,'primer corte'] = df_Data.loc[index,'primer corte']/10


k=df_Data['primer corte']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('peso')#Variable cuantitativa

for index in df_Data.index:
    if df_Data.loc[index,'peso'] == '60 Kg':
        df_Data.loc[index,'peso'] = '60'

pes=df_Data['peso'].astype(float)#Covierte a flotante

for index in df_Data.index:
    df_Data.loc[index,'peso'] = pes[index]

k=df_Data['peso']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente

print('--------------------------------------------------------------------------')
print('estatura')#Variable cuantitativa

for index in df_Data.index:
    if df_Data.loc[index,'estatura'] == '1.77 metros':
        df_Data.loc[index,'estatura'] = '1.77'
    elif df_Data.loc[index,'estatura']=='1.65 metros':
        df_Data.loc[index,'estatura'] = '1.65'
    elif df_Data.loc[index,'estatura']=='1.73 metros':
        df_Data.loc[index,'estatura'] = '1.73'
    elif df_Data.loc[index,'estatura']=='1,63':
        df_Data.loc[index,'estatura'] = '1.63'

pes=df_Data['estatura'].astype(float)#Covierte a flotante

for index in df_Data.index:
    df_Data.loc[index,'estatura'] = pes[index]

for index in df_Data.index:
    if df_Data.loc[index,'estatura'] > 100:
        df_Data.loc[index,'estatura'] = df_Data.loc[index,'estatura']/100

k=df_Data['estatura']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('edad')#Variable cuantitativa

for index in df_Data.index:
    if df_Data.loc[index,'edad'] == '20 aa0os ':
        df_Data.loc[index,'edad'] = '20'

pes=df_Data['edad'].astype(float)#Covierte a flotante
for index in df_Data.index:
    df_Data.loc[index,'edad'] = pes[index]

k=df_Data['edad']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('fecha de nacimiento')#Variable cuantitativa

df_Data['fecha de nacimiento'].fillna(0 , inplace=True)#valores nulos pasan a ser zero

for index in df_Data.index:
    if df_Data.loc[index,'fecha de nacimiento'] == 0:
        df_Data.loc[index,'fecha de nacimiento'] = '12/03/2002'


k=df_Data['fecha de nacimiento']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('lugar recidencia')#Variable cualitativa

dictionary2={
'Tunja':'Tunja',
 'tunja':'Tunja',
 'Samaca0 ':'Samaca',
 'Tunja ':'Tunja',
 'Barbosa Santander':'Barbosa',
 'Boyaca0':'Boyaca',
 'Tunja Boyaca0':'Tunja',
  'TUNJA':'Tunja'
}#To repleace all special characters

df_Data['lugar recidencia'].replace(dictionary2, regex=True, inplace=True)

dictt_21={
'TunjaBoyaca':'Tunja',
'Cucuta NDS':'Cucuta',
'Duitama, Boyaca':'Duitama'
}#To repleace all special characters
df_Data['lugar recidencia'].replace(dictt_21, regex=True, inplace=True)

k=df_Data['lugar recidencia']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('cohabitantes')#Variable cualitativa

for index in df_Data.index:
    if df_Data.loc[index,'cohabitantes'] == 'Vivo sol@ (habitaciaon, residencia universitaria)':
        df_Data.loc[index,'cohabitantes'] = 'Vivo Solo'
    elif df_Data.loc[index,'cohabitantes']=='Mama0, papa0, hermamos (Familia primaria)':
        df_Data.loc[index,'cohabitantes'] = 'Familia Primaria'
    elif df_Data.loc[index,'cohabitantes']=='Familia secundaria (primos, tios, abuelos)':
        df_Data.loc[index,'cohabitantes'] = 'Familia secundaria'
    elif df_Data.loc[index,'cohabitantes']=='Familia primaria y secundaria.':
        df_Data.loc[index,'cohabitantes'] = 'Familia primaria y secundaria'
    elif df_Data.loc[index,'cohabitantes']=='Mama0':
        df_Data.loc[index,'cohabitantes'] = 'madre'


k=df_Data['cohabitantes']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('Horas de Actividad fisica')#Variable cuantitativa
k=df_Data['Horas de Actividad fisica']
D = k.unique().tolist()
print('Valores unicos: ',D)#No es necesario el proceso de limpieza
print('--------------------------------------------------------------------------')
print('Horas de Sueño')#Variable cuantitativa

df_Data['Horas de Sueño'].fillna(0 , inplace=True)#valores nulos pasan a ser zero

for index in df_Data.index:
    if df_Data.loc[index,'Horas de Sueño'] == 0:
        df_Data.loc[index,'Horas de Sueño'] = 'No duerme'
    elif df_Data.loc[index,'Horas de Sueño']=='8 horas o ma0s':
        df_Data.loc[index,'Horas de Sueño'] = '8 horas o mas'


k=df_Data['Horas de Sueño']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente
print('--------------------------------------------------------------------------')
print('Horas de esparcimiento')#Variable cuantitativa

df_Data['Horas de esparcimiento'].fillna(0 , inplace=True)#valores nulos pasan a ser zero

for index in df_Data.index:
    if df_Data.loc[index,'Horas de esparcimiento'] == 0:
        df_Data.loc[index,'Horas de esparcimiento'] = 'no tengo tiempo'

for index in df_Data.index:
    if df_Data.loc[index,'Horas de esparcimiento'] == 'no tengo tiempo':
        df_Data.loc[index,'Horas de esparcimiento'] = '0h'
    elif df_Data.loc[index,'Horas de esparcimiento']=='2 horas a la semana':
        df_Data.loc[index,'Horas de esparcimiento'] = '2h'
    elif df_Data.loc[index,'Horas de esparcimiento']=='5 o  ma0s horas a la semana':
        df_Data.loc[index,'Horas de esparcimiento'] = '+5h'
    elif df_Data.loc[index,'Horas de esparcimiento']=='entre 2 y 5 horas a la semana':
        df_Data.loc[index,'Horas de esparcimiento'] = '2-5h'
    elif df_Data.loc[index,'Horas de esparcimiento']=='1  hora a la semana':
        df_Data.loc[index,'Horas de esparcimiento'] = '1h'

k=df_Data['Horas de esparcimiento']
D = k.unique().tolist()
print('Valores unicos: ',D)#Finalmente se comprueba la limpieza correspondiente

#ANALISIS POR COLUMNAS DE CADA VARIABLE

print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Fecha']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion Fecha')
plt.ylabel('Fecha')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#La moda es: 2022/07/15 SIN embarno presenta aoutliers o valores atipicos
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['apellidos']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion apellidos')
plt.ylabel('apellidos')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#No tiene una moda clara sin embargo cada datos es unico y no presenta outliers o valores atipicos
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['nombres']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion nombres')
plt.ylabel('nombres')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#No tiene una moda clara sin embargo cada datos es unico y no presenta outliers o valores atipicos
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['asignatura']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion asignatura')
plt.ylabel('asignatura')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 'Bases de Datos II' sin embargo presenta un dato outlier o atipico: 'Ninguna'
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['primer corte']
Moda = k.mode()
print('Moda: ',Moda)
Media_Data = k.mean()
print('primer corte -- mean() ----->', Media_Data)
Data = k.std(axis= 0) #Axis=0 por columnas
print("primer corte -- std() ----->", Data)
Disper = k.var()
print("primer corte -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-20% indicando que los datos tienen muy alta
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('-min: ',LL,' -max: ',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la primer corte')
plt.xlabel('primer corte')
plt.ylabel('Frecuencia')
plt.show()
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion primer corte')
plt.ylabel('primer corte')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 1.7 sin embargo presenta un dato outlier o atipico: '0.0' y '5'
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['peso']
Moda = k.mode()
print('Moda: ',Moda)
Media_Data = k.mean()
print('peso -- mean() ----->', Media_Data)
Data = k.std(axis= 0) #Axis=0 por columnas
print("peso -- std() ----->", Data)
Disper = k.var()
print("peso -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-17.79% indicando que los datos tienen alta
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('-min: ',LL,' -max: ',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma del peso')
plt.xlabel('peso')
plt.ylabel('Frecuencia')
plt.show()
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion peso')
plt.ylabel('peso')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 60 sin embargo presenta un dato outlier o atipico: '47', '110' y '90'
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['estatura']
Moda = k.mode()
print('Moda: ',Moda)
Media_Data = k.mean()
print('estatura -- mean() ----->', Media_Data)
Data = k.std(axis= 0) #Axis=0 por columnas
print("estatura -- std() ----->", Data)
Disper = k.var()
print("estatura -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-4.5% indicando que los datos tienen baja
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('-min: ',LL,' -max: ',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la estatura')
plt.xlabel('estatura')
plt.ylabel('Frecuencia')
plt.show()
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion estatura')
plt.ylabel('estatura')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 1.73 sin embargo presenta un dato outlier o atipico: 1.93
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['edad']
Moda = k.mode()
print('Moda: ',Moda)
Media_Data = k.mean()
print('edad -- mean() ----->', Media_Data)
Data = k.std(axis= 0) #Axis=0 por columnas
print("edad -- std() ----->", Data)
Disper = k.var()
print("edad -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-12.28% indicando que los datos tienen
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('-min: ',LL,' -max: ',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la edad')
plt.xlabel('edad')
plt.ylabel('Frecuencia')
plt.show()
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion edad')
plt.ylabel('edad')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 19 sin embargo presenta un dato outlier o atipico: 36
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['fecha de nacimiento']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion fecha de nacimiento')
plt.ylabel('fecha de nacimiento')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#No tiene una moda clara sin embargo cada datos es unico y no presenta outliers o valores atipicos
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['lugar recidencia']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion lugar recidencia')
plt.ylabel('lugar recidencia')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: Tunja sin embargo presenta varios datos outlier o atipico como: cucuta, samaca
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['cohabitantes']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Grafico de dispersion cohabitantes')
plt.ylabel('cohabitantes')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: Vivo Solo sin embargo presenta un dato outlier o atipico: Familia primaria y secundaria
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de Actividad fisica']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Horas de Actividad fisica')
plt.ylabel('Horas de Actividad fisica')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#No tiene una moda clara sin embargo cada datos es unico y no presenta outliers o valores atipicos
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de Sueño']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Horas de Sueño')
plt.ylabel('Horas de Sueño')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 6h sin embargo presenta un dato outlier o atipico: No duerme
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Data['Horas de esparcimiento']
Moda = k.mode()
print('Moda: ',Moda)
#Graficas de dispersión
fig, ax= plt.subplots()
ax.scatter(k,range(88))
plt.title('Horas de esparcimiento')
plt.ylabel('Horas de esparcimiento')
plt.xlabel('valores')
plt.show()
#Valores nulos
D = k.unique().tolist()
print('Valores unicos: ',D)
#la moda es: 2-5h sin embargo presenta un dato outlier o atipico: 1h el dato menos popular

print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
#clear
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
#J = df_Data[[ 'edad', 'primer corte', 'peso', 'estatura']]
#corre = J.corr(method='pearson')
#corre.style.background_gradient(cmap='coolwarm')
#plt.matshow(corre)
#plt.show()
print('--------------------------------------------------------------------------')
df_Data.to_csv('all.csv') #exporta el dataframe
df_Data