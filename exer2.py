# -*- coding: utf-8 -*-
"""Exer2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w2LsK6IAqgMi1x3ypFv1TRIn7N-V5sdX
"""

import pandas as pd    #pandas
import numpy as np    #numpy
import matplotlib.pyplot as plt #Para graficar
from statsmodels.graphics.gofplots import qqplot
import statsmodels.api as sm
from scipy import stats #Graficos de puntos quartiles
import seaborn as sns #HEat map
from sklearn.preprocessing import LabelEncoder  #Para codificar variables


url="https://drive.google.com/uc?export=download&id=1nh2dHGLvYfTt99nG9kZXEjJFyMe5flSL" #leer de internet
#df_Tunja = pd.read_csv(url, sep=';')
df_Tunja = pd.read_csv(url, encoding='latin-1')

print('--------------------------------------------------------------------------')
k=df_Tunja['Dirección del Viento']
Media_tunja = k.mean()
print('Dirección del Viento -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Dirección del Viento -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-9.93% indicando que los datos tienen muy poca
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la dirección del Viento')
plt.xlabel('Dirección del Viento')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar cerca a la media sin embargo los datos no presentan ninguna moda 
#con alta frecuencia en comparacion a los demas datos
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienen una distribución similar entre ellos apesar de que
#existe un breaking point en el principio
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Dirección del Viento'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Cobertura total nubosa']
Media_tunja = k.mean()
print('Cobertura total nubosa -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Cobertura total nubosa -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-24.08% indicando que los datos tienen
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la Cobertura total nubosa')
plt.xlabel('Cobertura total nubosa')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar antes de la media alrededor de 50 presentando una moda alta
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienen una distribución similar entre ellos apesar de que
#existe multiples breaking points
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Cobertura total nubosa'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Temperatura']
Media_tunja = k.mean()
print('Temperatura -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Temperatura -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-27.70% indicando que los datos tienen mas alta
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la Temperatura')
plt.xlabel('Temperatura')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar antes de la media alrededor de 8 presentando una moda alta
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienden a estar muy cerca a la linea de angulo 45 indicando
#distribuciones similares
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Temperatura'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Presión']
Media_tunja = k.mean()
print('Presión -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Presión -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-0.21% indicando que los datos tienen muy baja
# dispersion y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la Presión')
plt.xlabel('Presión')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar despues de la media alrededor de 1020 presentando una moda notable
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienden a estar casi de manera ideal alrededor a la linea de angulo 45 indicando
#distribuciones similares con algunos breaking points en el principio y final
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Presión'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Punto de Rocío']
Media_tunja = k.mean()
print('Punto de Rocío -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Punto de Rocío -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-21.35% indicando que los datos tienen una
# dispersion mas alta y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma del Punto de Rocío')
plt.xlabel('Punto de Rocío')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar despues de la media alrededor de 8 presentando una moda notable
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienden a estar cerca a la linea de angulo 45 indicando
#distribuciones similares con algunos breaking points en el principio y final
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Punto de Rocío'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Velocidad del Viento']
Media_tunja = k.mean()
print('Velocidad del Viento -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Velocidad del Viento -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-16.66% indicando que los datos tienen una
# dispersion mas alta y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la Velocidad del Viento')
plt.xlabel('Velocidad del Viento')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar antes de la media alrededor de 1.50 presentando una moda notable
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienden a estar cerca a la linea de angulo 45 indicando
#distribuciones similares
D = k.unique().tolist()
print('Valores unicos: ',D)
FF = k.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Velocidad del Viento'].fillna(0, inplace=True)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
k=df_Tunja['Velocidad del Viento']
Media_tunja = k.mean()
print('Velocidad del Viento -- mean() ----->', Media_tunja)
Data = k.std(axis= 0) #Axis=0 por columnas
print("Velocidad del Viento -- std() ----->", Data)
Disper = k.var()
print("Dirección del Viento -- varianza() ----->", Disper)
#La desviacion estandar de esta variable es de alredor de un +-16.66% indicando que los datos tienen una
# dispersion mas alta y estan agrupados de manera Normal alrededor de la media 
LL = k.min()
HH = k.max()
print('--',LL,'--',HH)
inter = range(int(LL) , int(HH) +2)
plt.hist(x=k, bins=inter, color='#F2AB6D', rwidth=0.8)
plt.title('Histograma de la Velocidad del Viento')
plt.xlabel('Velocidad del Viento')
plt.ylabel('Frecuencia')
plt.show()
#La frecuencias mas alta se puede observar antes de la media alrededor de 1.50 presentando una moda notable
print('------------')
fig = sm.qqplot(k, stats.t, fit=True, line="45")
plt.show()
#Se observa que los puntos tienden a estar cerca a la linea de angulo 45 indicando
#distribuciones similares
D = k.unique().tolist()
print('Valores unicos: ',D)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
FF = df_Tunja.isnull().sum()
print('Valores Nulos: ', FF)
df_Tunja['Región'].fillna(0, inplace=True)
print('Data frame \n', df_Tunja)
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
J = df_Tunja[['Temperatura', 'Velocidad del Viento', 'Dirección del Viento', 'Presión', 'Punto de Rocío', 'Cobertura total nubosa']]
corr_df = J.corr()
print("La matriz de correlacion es:")
print(corr_df)
#Existe una correlacion linealmente positiva entre la temperatura y [Velocidad del Viento,Dirección del Viento,Punto de Rocío]
#no hay correlación lineal entre la temperatura y Cobertura total nubosa
#la correlacion entre la temperatura y Presión es muy poca y tiende a ser lineal negativa.
#Existe una correlacion linealmente positiva entre la Velocidad del Viento y [Dirección del Viento,Punto de Rocío]
#no hay correlación lineal entre la Velocidad del Viento y Cobertura total nubosa
#la correlacion entre la Velocidad del Viento y la Presión tiende a ser lineal negativa.
#Existe una correlacion linealmente positiva entre la Dirección del Viento y el Punto de Rocío
#la correlacion entre la Dirección del Viento y la Presión tiende a ser lineal negativa.
#no hay correlación lineal entre la Dirección del Viento y Cobertura total nubosa
#Existe una correlacion leve linealmente negativa entre la Presión y el Punto de Rocío
#no hay correlación lineal entre la Presión y Cobertura total nubosa
#no hay correlación lineal entre el Punto de Rocío y Cobertura total nubosa
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
corre = J.corr(method='pearson')
corre.style.background_gradient(cmap='coolwarm')
plt.matshow(corre)
plt.show()
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
YY = df_Tunja[['Temperatura', 'Velocidad del Viento', 'Dirección del Viento', 'Presión', 'Punto de Rocío', 'Cobertura total nubosa', 'Humedad']]
corr_ = YY.corr(method='pearson')
plt.figure(figsize=(8, 6))
sns.heatmap(corr_, annot=True)
plt.show()
print('--------------------------------------------------------------------------')
print('--------------------------------------------------------------------------')
print(df_Tunja['Pronóstico '])
V = df_Tunja['Pronóstico '].unique().tolist()
print('Valores unicos', V)
print('--------------------------------------------------------------------------')
#values = df_Tunja[['Temperatura', 'Velocidad del Viento', 'Dirección del Viento', 'Presión', 'Punto de Rocío', 'Cobertura total nubosa', 'Humedad', 'Pronóstico ']]
#encoder = LabelEncoder()
#values[:,7] = encoder.fit_transform(values[:,7])
#print(values[:,7])
#print(type(values))
#np.unique(values[:,7])